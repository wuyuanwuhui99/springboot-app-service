<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.player.circle.mapper.SocialMapper">

    <select id="getCommentCount" resultType="Long">
        SELECT COUNT(*) FROM social_comment WHERE relation_id = #{relationId} and `type` = #{type}
    </select>

    <resultMap id="getTopCommentListAssociation" type="com.player.common.entity.CommentEntity">
        <id property="id" column="id" javaType="Long" />
        <result property="content" column="content" javaType="String"/>
        <result property="parentId" column="parent_id" javaType="Long"/>
        <result property="topId" column="top_id" javaType="Long"/>
        <result property="relationId" column="relation_id" javaType="Long"/>
        <result property="type" column="type" javaType="String"/>
        <result property="createTime" column="create_time" javaType="Date"/>
        <result property="updateTime" column="update_time" javaType="Date"/>
        <result property="replyCount" column="reply_count" javaType="int"/>
        <result property="userId" column="user_id" javaType="String"/>
        <result property="username" column="username" javaType="String"/>
        <result property="avater" column="avater" javaType="String"/>
        <result property="replyUserId" column="reply_user_id" javaType="String"/>
        <result property="replyUserName" column="reply_username" javaType="String"/>
        <association property="replyList"  column="id" select="getSocialReplyTopId"/>
        <association property="replyCount"  column="id" select="getSocialReplyCountTopId"/>
    </resultMap>

    <select id="getTopCommentList" resultMap="getTopCommentListAssociation">
        SELECT tc.*,u.username,u.avater FROM (
	        SELECT tu.* FROM (
		        (SELECT c.*,COUNT(t.id) AS replyCount FROM social_comment c  LEFT JOIN social_comment t ON  c.id = t.top_id  WHERE c.relation_id = #{relationId} AND c.type = #{type} AND c.top_id is null GROUP BY c.id)
	        ) tu
        ) tc
        LEFT JOIN `user` u ON u.id = tc.user_id LIMIT #{start},#{pageSize}
    </select>

    <select id="getSocialReplyTopId" resultType="com.player.common.entity.CommentEntity">
        SELECT t6.* from
            (SELECT
                t4.*,
                t5.username AS reply_user_name
            FROM
                (
                SELECT
                    t1.*,
                    t2.username,
                    t2.avater,
                    t3.user_id AS reply_user_id
                FROM
                    social_comment t1
                    LEFT JOIN USER t2 ON t1.user_id = t2.user_id
                    LEFT JOIN social_comment t3 ON t1.top_id = t3.id
                WHERE
                    t1.top_id = #{id}
                ) t4
                LEFT JOIN USER t5 ON t4.reply_user_id = t5.user_id)t6
            ORDER BY t6.create_time DESC limit 0 ,5
    </select>

    <select id="getSocialReplyCountTopId" resultType="int">
        SELECT COUNT(id) FROM social_comment WHERE top_id = #{id}
    </select>

    <insert id="insertComment" parameterType="com.player.common.entity.CommentEntity"  keyProperty="id"  useGeneratedKeys="true">
        INSERT INTO social_comment(content,parent_id,top_id,relation_id,`type`,user_id,create_time,udate_time) VALUES (#{content},
        <choose>
            <when test="parentId == 0">
                null
            </when>
            <otherwise>
                #{parentId}
            </otherwise>
        </choose>,
        <choose>
            <when test="topId == 0">
                null
            </when>
            <otherwise>
                #{topId}
            </otherwise>
        </choose>,
        #{relationId},#{type},#{userId},NOW(),NOW())
    </insert>

    <delete id="deleteComment">
        DELETE FROM social_comment WHERE id = #{id} AND user_id = #{userId}
    </delete>

    <select id="getReplyCommentList" resultType="com.player.common.entity.CommentEntity">
        SELECT t3.*,t4.username as reply_user_name from (
                SELECT t1.*, t2.user_id as reply_user_id from
                            (SELECT c.*,u.username,u.avater FROM social_comment c LEFT JOIN `user` u ON c.user_id = u.user_id WHERE c.top_id = #{topId} limit #{start},#{pageSize}) t1 					LEFT JOIN social_comment T2 ON T1.top_id = t2.id
        ) t3 LEFT JOIN `user` t4 ON t3.reply_user_id = t4.user_id
    </select>

    <select id="getCommentItem" resultType="com.player.common.entity.CommentEntity">
        SELECT t.*,us.username as reply_user_name FROM (
            SELECT c.*,
                u.username,
                u.avater,
                s.user_id as reply_user_id
                 FROM social_comment c
                 LEFT JOIN user u on c.user_id = u.user_id
                 LEFT JOIN social_comment s on c.parent_id = s.id
                 WHERE c.id =  #{id} and c.type = #{type}
        ) t
        LEFT JOIN user us on t.reply_user_id = us.user_id
    </select>

    <insert id="saveLike" parameterType="com.player.common.entity.LikeEntity" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        <selectKey keyProperty="id" resultType="Long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO social_like(relation_id,`type`,user_id,create_time,update_time) SELECT #{relationId},#{type},#{userId},NOW(),NOW() FROM DUAL WHERE NOT EXISTS (SELECT * FROM social_like WHERE relation_id = #{relationId} and `type` = #{type} and user_id = #{userId})
    </insert>

    <select id="getLikeById" resultType="com.player.common.entity.LikeEntity">
        SELECT t1.*,t2.username FROM social_like t1 LEFT JOIN user t2 ON t1.user_id = t2.user_id WHERE id = #{id}
    </select>

    <delete id="deleteLike">
        DELETE FROM social_like WHERE user_id =#{userId} AND relation_id=#{relationId} and `type` = #{type}
    </delete>

    <select id="isLike" resultType="Long">
        SELECT COUNT(*) as total FROM social_like WHERE user_id=#{userId} AND relation_id = #{relationId} and `type` = #{type}
    </select>
</mapper>

